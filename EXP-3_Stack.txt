#include <stdio.h>
#include <stdlib.h>

void reverse(int* arr, int size) {
    for (int i = 0; i < size / 2; i++) {
        int temp = arr[i];
        arr[i] = arr[size - 1 - i];
        arr[size - 1 - i] = temp;
    }
}

void partial_sum(int* arr, int size) {
    for (int i = 1; i < size; i++) {
        arr[i] += arr[i - 1];
    }
}

int min(int a, int b, int c) {
    if (a <= b && a <= c) return a;
    if (b <= a && b <= c) return b;
    return c;
}

int equalStacks(int* h1, int n1, int* h2, int n2, int* h3, int n3) {
    reverse(h1, n1);
    reverse(h2, n2);
    reverse(h3, n3);
    
    partial_sum(h1, n1);
    partial_sum(h2, n2);
    partial_sum(h3, n3);
    
    while (n1 > 0 && n2 > 0 && n3 > 0 &&
        !(h1[n1 - 1] == h2[n2 - 1] && h2[n2 - 1] == h3[n3 - 1])) {
        int minHeight = min(h1[n1 - 1], h2[n2 - 1], h3[n3 - 1]);
        while (n1 > 0 && h1[n1 - 1] > minHeight) n1--;
        while (n2 > 0 && h2[n2 - 1] > minHeight) n2--;
        while (n3 > 0 && h3[n3 - 1] > minHeight) n3--;
    }
    
    return (n1 == 0 || n2 == 0 || n3 == 0) ? 0 : h1[n1 - 1];
}

int main() {
    int n1, n2, n3;
    printf("Enter number of elements of each stack: \n");
    scanf("%d %d %d", &n1, &n2, &n3);
    int *h1 = (int*)malloc(n1 * sizeof(int));
    int *h2 = (int*)malloc(n2 * sizeof(int));
    int *h3 = (int*)malloc(n3 * sizeof(int));
    
    printf("Enter elements of stack 1: \n");
    for (int i = 0; i < n1; i++) {
        scanf("%d", &h1[i]);
    }
    printf("Enter elements of stack 2: \n");
    for (int i = 0; i < n2; i++) {
        scanf("%d", &h2[i]);
    }
    printf("Enter elements of stack 3: \n");
    for (int i = 0; i < n3; i++) {
        scanf("%d", &h3[i]);
    }
    
    int result = equalStacks(h1, n1, h2, n2, h3, n3);
    printf("Maximum possible common height: %d\n", result);
    
    free(h1);
    free(h2);
    free(h3);
    
    return 0;
}

